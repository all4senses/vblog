<?php

/**
 * @file
 * Module contained miscelanious helper functions and hooks.
 */


/**
 * Implements hook_menu().
 */
function vb_misc_menu() {
 
  
  $items['test'] = array(
    'title' => 'Test page',
    'page callback' => 'vb_misc_testPage',
    //'access arguments' => array('administer content'),
    'access arguments' => array('administer taxonomy'), 
    'type' => MENU_CALLBACK,
  );
  
  
  return $items;
}


/**
 * Test page function for url /test.
 */
function vb_misc_testPage() {
  
  $out = '<div>Start test...</div>';

  
  //vb_misc_import_remote_blogPosts();
  
  
  
  
  
  
  
  $query = db_select('mt_comment_EXPORT', 'c')
    ->fields('c');
  $wp_comments = $query->execute();
  
  
  foreach ($wp_comments as $wp_comment) {
    
    //dpm($wp_comment);
   
    $query = db_select('field_data_field_old_id', 'oi');
    $query->leftJoin('node', 'n', 'n.nid = oi.entity_id');
    $query->condition('oi.field_old_id_value', $wp_comment->comment_entry_id);
    $query->fields('n', array('nid'));
    $node_nid = $query->execute()->fetchField();
    
    
    $comment = new stdClass();
    
    $comment->nid = $node_nid; // nid of a node you want to attach a comment to
    $comment->cid = 0; // leave it as is
    $comment->pid = 0; // parent comment id, 0 if none 
    $comment->uid = 0; // user's id, who left the comment
    $comment->mail = $wp_comment->comment_email; // user's email
    $comment->name = $wp_comment->comment_author; // If user is authenticated you can omit this field, it will be auto-populated, if the user is anonymous and you want to name him somehow, input his name here
    $comment->thread = '01/'; // OPTIONAL. If you need comments to be threaded you can fill this value. Otherwise omit it.
    $comment->hostname = $wp_comment->comment_ip; // OPTIONAL. You can log poster's ip here
    $comment->is_anonymous = 1; // leave it as is
    $comment->homepage = $wp_comment->comment_url; // you can add homepage URL here
    $comment->status = COMMENT_PUBLISHED; // We auto-publish this comment
    $comment->language = LANGUAGE_NONE; // The same as for a node
    $comment->subject = ''; 
    $comment->comment_body[$comment->language][0]['value'] = $wp_comment->comment_text; // Everything here is pretty much like with a node
    $comment->comment_body[$comment->language][0]['format'] = 'filtered_html'; 

    comment_submit($comment); // saving a comment
  
    $comment->created = strtotime($wp_comment->comment_created_on); // OPTIONAL. You can set any time you want here. Useful for backdated comments creation.
    $comment->changed = $comment->created;

    dpm($comment);
    
    vb_misc_comment_save($comment);
    
    $result = db_update('node')
      ->fields(array(
        'comment' => 1,
      ))
      ->condition('nid', $node_nid)
      ->execute();
    $result = db_update('node_revision')
      ->fields(array(
        'comment' => 1,
      ))
      ->condition('nid', $node_nid)
      ->execute();
    
    break;
    
  }
  

  
  return $out . '<br>End of Test';
}



/**
 * Imports blog_posts from a remote table.
 */
function vb_misc_import_remote_blogPosts() { 
  
  
  $remote_category = array(
    5356 =>	'Best of',
    343	=> 'Calling plans',
    345	=> 'Companies',
    353	=> 'Conferences',
    728	=> 'Dangers',
    349	=> 'Development Tools',
    6136 => 'Did you know',
    370	=> 'General',
    1060 => 'Hardware',
    729	=> 'Industry News',
    5638 => 'Information About',
    351	=> 'Interviews',
    344	=> 'IP Business Phone',
    1969 => 'Misc',
    358	=> 'New Application',
    1058 => 'Podcasts',
    1771 => 'privacy',
    6134 => 'Quick introduction',
    1672 => 'skype',
    426	=> 'Terminal',
    807202 => 'Uncategorized',
  );

  $category_map = array(
    5356 =>	1,
    343	=> 2,
    345	=> 3,
    353	=> 4,
    728	=> 5,
    349	=> 6,
    6136 => 7,
    370	=> 8,
    1060 => 9,
    729	=> 10,
    5638 => 11,
    351	=> 12,
    344	=> 13,
    1969 => 14,
    358	=> 15,
    1058 => 16,
    1771 => 17,
    1672 => 18,
    426	=> 19,
    6134 => 20,
  );
  
  
  $query = db_select('mt_entry_EXPORT', 'vp')
        ->fields('vp');
  $query->leftJoin('mt_placement_EXPORT', 'pl', 'pl.placement_entry_id = vp.entry_id AND pl.placement_is_primary = 1');
  $query->fields('pl', array('placement_category_id', 'placement_is_primary'));
  
  //$query->range(0, 20);
  $results = $query->execute()->fetchAll();
  
  //dpm($results);
  
 //return;
 
 
  foreach ($results as $result) {
    
    $form_state['values'] = array(
      'title' => $result->entry_title,
      'post_date' => $result->entry_created_on,
      'created' => strtotime($result->entry_created_on),
      'changed' => strtotime($result->entry_created_on),
      'placement_is_primary' => $result->placement_is_primary,
      'category' => isset($category_map[$result->placement_category_id]) ? $category_map[$result->placement_category_id] : NULL,
      'category_term' => isset($category_map[$result->placement_category_id]) ? $remote_category[$result->placement_category_id] : NULL,
      'url_alias' => str_replace('http://www.voip-weblog.com/', '', $result->url),
      'ID' => $result->entry_id,
    );
  
    
    $query = db_select('mt_entry_EXPORT', 'vp');
    $query->leftJoin('mt_placement_EXPORT', 'pl', 'pl.placement_entry_id = vp.entry_id AND pl.placement_is_primary = 0');
    $query->condition('pl.placement_is_primary', 0);
    $query->condition('vp.entry_id', $result->entry_id);
    $query->fields('pl', array('placement_category_id'));

    //$query->range(0, 20);
    $other_term = $query->execute()->fetchField();
    if ($other_term) {
      $form_state['values']['category_other'] = $category_map[$other_term];
      $form_state['values']['category_term_other'] = $remote_category[$other_term];
    }
    
    
    
    $form_state['values']['body']['und'][0]['value'] = str_replace('--', '-', $result->entry_text);
    
    if (preg_match('/(.*)<!--more-->(.*)/s', $form_state['values']['body']['und'][0]['value'], $matches)) {
      $form_state['values']['body']['und'][0]['summary'] = $matches[1];
    }
    else {
      $form_state['values']['body']['und'][0]['summary'] = '';
    }
    
    $form_states[] = $form_state['values'];
    // Add only one node.
    vb_misc_createNode_BlogPost($form_state);
    //break;
  }
  
  dpm($form_states);
  


  
}


/**
 * Accepts a submission of new or changed comment content.
 *
 * @param $comment
 *   A comment object.
 */
function vb_misc_comment_save($comment) {
  global $user;

  $transaction = db_transaction();
  try {
    $defaults = array(
      'mail' => '',
      'homepage' => '',
      'name' => '',
      'status' => user_access('skip comment approval') ? COMMENT_PUBLISHED : COMMENT_NOT_PUBLISHED,
    );
    foreach ($defaults as $key => $default) {
      if (!isset($comment->$key)) {
        $comment->$key = $default;
      }
    }
    // Make sure we have a bundle name.
    if (!isset($comment->node_type)) {
      
      
      // a4s fix. Make it a bit faster...
      //$node = node_load($comment->nid);
      
      $query = db_select('node', 'n')
        ->fields('n', array('type'))
        ->condition('nid', $comment->nid);
      $node = $query->execute()->fetchObject();
              
      $comment->node_type = 'comment_node_' . $node->type;
    }

    // Load the stored entity, if any.
    if (!empty($comment->cid) && !isset($comment->original)) {
      $comment->original = entity_load_unchanged('comment', $comment->cid);
    }

    field_attach_presave('comment', $comment);

    // Allow modules to alter the comment before saving.
    module_invoke_all('comment_presave', $comment);
    module_invoke_all('entity_presave', $comment, 'comment');

    if ($comment->cid) {

      drupal_write_record('comment', $comment, 'cid');

      // Ignore slave server temporarily to give time for the
      // saved comment to be propagated to the slave.
      db_ignore_slave();

      // Update the {node_comment_statistics} table prior to executing hooks.
      _comment_update_node_statistics($comment->nid);

      field_attach_update('comment', $comment);
      // Allow modules to respond to the updating of a comment.
      module_invoke_all('comment_update', $comment);
      module_invoke_all('entity_update', $comment, 'comment');
    }
    else {
      // Add the comment to database. This next section builds the thread field.
      // Also see the documentation for comment_view().
      if (!empty($comment->thread)) {
        // Allow calling code to set thread itself.
        $thread = $comment->thread;
      }
      elseif ($comment->pid == 0) {
        // This is a comment with no parent comment (depth 0): we start
        // by retrieving the maximum thread level.
        $max = db_query('SELECT MAX(thread) FROM {comment} WHERE nid = :nid', array(':nid' => $comment->nid))->fetchField();
        // Strip the "/" from the end of the thread.
        $max = rtrim($max, '/');
        // We need to get the value at the correct depth.
        $parts = explode('.', $max);
        $firstsegment = $parts[0];
        // Finally, build the thread field for this new comment.
        $thread = int2vancode(vancode2int($firstsegment) + 1) . '/';
      }
      else {
        // This is a comment with a parent comment, so increase the part of the
        // thread value at the proper depth.

        // Get the parent comment:
        $parent = comment_load($comment->pid);
        // Strip the "/" from the end of the parent thread.
        $parent->thread = (string) rtrim((string) $parent->thread, '/');
        // Get the max value in *this* thread.
        $max = db_query("SELECT MAX(thread) FROM {comment} WHERE thread LIKE :thread AND nid = :nid", array(
          ':thread' => $parent->thread . '.%',
          ':nid' => $comment->nid,
        ))->fetchField();

        if ($max == '') {
          // First child of this parent.
          $thread = $parent->thread . '.' . int2vancode(0) . '/';
        }
        else {
          // Strip the "/" at the end of the thread.
          $max = rtrim($max, '/');
          // Get the value at the correct depth.
          $parts = explode('.', $max);
          $parent_depth = count(explode('.', $parent->thread));
          $last = $parts[$parent_depth];
          // Finally, build the thread field for this new comment.
          $thread = $parent->thread . '.' . int2vancode(vancode2int($last) + 1) . '/';
        }
      }

      if (empty($comment->created)) {
        $comment->created = REQUEST_TIME;
      }

      if (empty($comment->changed)) {
        $comment->changed = $comment->created;
      }

      if ($comment->uid === $user->uid && isset($user->name)) { // '===' Need to modify anonymous users as well.
        $comment->name = $user->name;
      }

      // Ensure the parent id (pid) has a value set.
      if (empty($comment->pid)) {
        $comment->pid = 0;
      }

      // Add the values which aren't passed into the function.
      $comment->thread = $thread;
      
      // a4s fix
      ///////////////////////////////////////$comment->hostname = ip_address();

      drupal_write_record('comment', $comment);

      // Ignore slave server temporarily to give time for the
      // created comment to be propagated to the slave.
      db_ignore_slave();

      // Update the {node_comment_statistics} table prior to executing hooks.
      _comment_update_node_statistics($comment->nid);

      field_attach_insert('comment', $comment);

      // Tell the other modules a new comment has been submitted.
      module_invoke_all('comment_insert', $comment);
      module_invoke_all('entity_insert', $comment, 'comment');
    }
    if ($comment->status == COMMENT_PUBLISHED) {
      module_invoke_all('comment_publish', $comment);
    }
    unset($comment->original);
  }
  catch (Exception $e) {
    $transaction->rollback('comment');
    watchdog_exception('comment', $e);
    throw $e;
  }

}


/**
 * Creates a node blog_post.
 */
function vb_misc_createNode_BlogPost($form_state) { 
  
  global $user;
  
  $node = new stdClass();
  $node->type = 'blog_post';
  node_object_prepare($node);
  
  $node->date = $form_state['values']['post_date'];
  $node->created = $form_state['values']['created'];
  $node->changed = $form_state['values']['changed'];
  
          
  $node->title = $form_state['values']['title'];
  $node->language = LANGUAGE_NONE;
  $node->uid = $user->uid;
  $node->status = 1;
  $node->promote = 0;
  $node->sticky = 0;
  $node->comment = 0;
  
  $node->body[$node->language][0]['format'] = 'full_html';
  $node->body[$node->language][0]['value'] = $form_state['values']['body']['und'][0]['value'];
  $node->body[$node->language][0]['summary'] = $form_state['values']['body']['und'][0]['summary'];
  $node->body[$node->language][0]['safe_summary'] = check_plain($form_state['values']['body']['und'][0]['summary']);
  $node->body[$node->language][0]['safe_value'] = check_plain($form_state['values']['body']['und'][0]['value']);
  
  $node->field_extra_data[$node->language][0] = array(
    'value' => NULL,
    'safe_value' => NULL,
    'format' => 'full_html',
  );
  $node->field_main_image[$node->language][0] = array(
    'value' => NULL,
    'safe_value' => NULL,
    'format' => 'full_html',
  );
  $node->field_a_teaser[$node->language][0] = array(
    'value' => NULL,
    'safe_value' => NULL,
    'format' => 'full_html',
  );
  
  $node->field_old_id[$node->language][0]['value'] = $form_state['values']['ID'];
  
  if ($form_state['values']['category']) {
    $node->field_categories[$node->language][0]['tid'] = $form_state['values']['category'];
  }
  if (!empty($form_state['values']['category_other'])) {
    $node->field_categories[$node->language][1]['tid'] = $form_state['values']['category_other'];
  }
  
  
  $node->path = array(
    'alias' => $form_state['values']['url_alias'],
    'language' => $node->language,
    'pathauto' => 0,
  );
  
  //dpm($node);
  //return;
  
  if ($node = node_submit($node)) {
    node_save($node);
    drupal_set_message('Saved, Ok!', 'warning');
  }
  
}


